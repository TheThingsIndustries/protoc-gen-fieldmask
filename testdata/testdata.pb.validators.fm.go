// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package testdata

import fmt "fmt"

func (msg *Empty) ValidateFields(paths ...string) error {
	if len(paths) != 0 {
		return fmt.Errorf("message Empty has no fields, but paths %s were specified", paths)
	}
	return nil
}

func (msg *Test) ValidateFields(paths ...string) error {
	if msg == nil {
		return nil
	}
	if len(paths) == 0 {
		paths = TestFieldPathsNested
	}
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "a":
			if err := msg.A.ValidateFields(subs...); err != nil {
				return err
			}
		case "c":
			if err := msg.C.ValidateFields(subs...); err != nil {
				return err
			}
		case "b":
			if err := msg.CustomName.ValidateFields(subs...); err != nil {
				return err
			}
		case "g":
			if err := msg.G.ValidateFields(subs...); err != nil {
				return err
			}
		case "h":
			if len(subs) > 0 {
				return fmt.Errorf("'h' has no subfields, but %s were specified", subs)
			}
			_ = msg.H // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
			if false {
				return fmt.Errorf("'h' is invalid")
			}
		case "i":
			if len(subs) > 0 {
				return fmt.Errorf("'i' has no subfields, but %s were specified", subs)
			}
			_ = msg.I // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
			if false {
				return fmt.Errorf("'i' is invalid")
			}
		case "testOneof":
			if len(subs) == 0 {
				subs = []string{
					"testOneof.d",
					"testOneof.e",
					"testOneof.f",
				}
			}

			subPathMap := _processPaths(subs)
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "e":
					if len(oneofSubs) > 0 {
						return fmt.Errorf("'e' has no subfields, but %s were specified", oneofSubs)
					}
					_ = msg.GetE() // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
					if false {
						return fmt.Errorf("'e' is invalid")
					}
				case "d":
					if len(oneofSubs) > 0 {
						return fmt.Errorf("'d' has no subfields, but %s were specified", oneofSubs)
					}
					_ = msg.GetD() // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
					if false {
						return fmt.Errorf("'d' is invalid")
					}
				case "f":
					if len(oneofSubs) > 0 {
						return fmt.Errorf("'f' has no subfields, but %s were specified", oneofSubs)
					}
					_ = msg.GetF() // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
					if false {
						return fmt.Errorf("'f' is invalid")
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (msg *Test_TestNested) ValidateFields(paths ...string) error {
	if msg == nil {
		return nil
	}
	if len(paths) == 0 {
		paths = Test_TestNestedFieldPathsNested
	}
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "a":
			if err := msg.A.ValidateFields(subs...); err != nil {
				return err
			}
		case "b":
			if len(subs) > 0 {
				return fmt.Errorf("'b' has no subfields, but %s were specified", subs)
			}
			_ = msg.B // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
			if false {
				return fmt.Errorf("'b' is invalid")
			}
		case "c":
			if len(subs) > 0 {
				return fmt.Errorf("'c' has no subfields, but %s were specified", subs)
			}
			_ = msg.C // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
			if false {
				return fmt.Errorf("'c' is invalid")
			}
		case "d":
			if len(subs) > 0 {
				return fmt.Errorf("'d' has no subfields, but %s were specified", subs)
			}
			_ = msg.D // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
			if false {
				return fmt.Errorf("'d' is invalid")
			}
		case "e":
			if len(subs) > 0 {
				return fmt.Errorf("'e' has no subfields, but %s were specified", subs)
			}
			_ = msg.E // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
			if false {
				return fmt.Errorf("'e' is invalid")
			}
		case "f":
			if len(subs) > 0 {
				return fmt.Errorf("'f' has no subfields, but %s were specified", subs)
			}
			_ = msg.F // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
			if false {
				return fmt.Errorf("'f' is invalid")
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (msg *Test_TestNested_TestNestedNested) ValidateFields(paths ...string) error {
	if msg == nil {
		return nil
	}
	if len(paths) == 0 {
		paths = Test_TestNested_TestNestedNestedFieldPathsNested
	}
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "a":
			if len(subs) > 0 {
				return fmt.Errorf("'a' has no subfields, but %s were specified", subs)
			}
			_ = msg.A // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
			if false {
				return fmt.Errorf("'a' is invalid")
			}
		case "b":
			if len(subs) > 0 {
				return fmt.Errorf("'b' has no subfields, but %s were specified", subs)
			}
			_ = msg.B // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
			if false {
				return fmt.Errorf("'b' is invalid")
			}
		case "c":
			if len(subs) > 0 {
				return fmt.Errorf("'c' has no subfields, but %s were specified", subs)
			}
			_ = msg.C // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
			if false {
				return fmt.Errorf("'c' is invalid")
			}
		case "d":
			if len(subs) > 0 {
				return fmt.Errorf("'d' has no subfields, but %s were specified", subs)
			}
			_ = msg.D // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
			if false {
				return fmt.Errorf("'d' is invalid")
			}
		case "h":
			if err := msg.Test_TestNested_TestNestedNested_TestNestedNestedEmbed.ValidateFields(subs...); err != nil {
				return err
			}
		case "testNestedNestedOneOf":
			if len(subs) == 0 {
				subs = []string{
					"testNestedNestedOneOf.e",
					"testNestedNestedOneOf.f",
					"testNestedNestedOneOf.g",
				}
			}

			subPathMap := _processPaths(subs)
			for oneofName, oneofSubs := range subPathMap {
				switch oneofName {
				case "e":
					if err := msg.GetE().ValidateFields(oneofSubs...); err != nil {
						return err
					}
				case "f":
					if len(oneofSubs) > 0 {
						return fmt.Errorf("'f' has no subfields, but %s were specified", oneofSubs)
					}
					_ = msg.GetF() // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
					if false {
						return fmt.Errorf("'f' is invalid")
					}
				case "g":
					if len(oneofSubs) > 0 {
						return fmt.Errorf("'g' has no subfields, but %s were specified", oneofSubs)
					}
					_ = msg.GetG() // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
					if false {
						return fmt.Errorf("'g' is invalid")
					}

				default:
					return fmt.Errorf("invalid oneof field: '%s.%s'", name, oneofName)
				}
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}

func (msg *Test_TestNested_TestNestedNested_TestNestedNestedEmbed) ValidateFields(paths ...string) error {
	if msg == nil {
		return nil
	}
	if len(paths) == 0 {
		paths = Test_TestNested_TestNestedNested_TestNestedNestedEmbedFieldPathsNested
	}
	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		switch name {
		case "nested_field":
			if len(subs) > 0 {
				return fmt.Errorf("'nested_field' has no subfields, but %s were specified", subs)
			}
			_ = msg.NestedField // TODO: Validate (https://github.com/TheThingsIndustries/protoc-gen-fieldmask/issues/21)
			if false {
				return fmt.Errorf("'nested_field' is invalid")
			}

		default:
			return fmt.Errorf("invalid field: '%s'", name)
		}
	}
	return nil
}
