// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package testdata

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/gogo/protobuf/types"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = types.DynamicAny{}
)

// define the regex for a UUID once up-front
var _testdata_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// ValidateFields checks the field values on Empty with the rules defined in
// the proto definition for this message. If any rules are violated, an error
// is returned.
func (m *Empty) ValidateFields(paths ...string) error {
	if len(paths) > 0 {
		return fmt.Errorf("message Empty has no fields, but paths %s were specified", paths)
	}
	return nil
}

// EmptyValidationError is the validation error returned by
// Empty.ValidateFields if the designated constraints aren't met.
type EmptyValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e EmptyValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e EmptyValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e EmptyValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e EmptyValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e EmptyValidationError) ErrorName() string { return "EmptyValidationError" }

// Error satisfies the builtin error interface
func (e EmptyValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sEmpty.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = EmptyValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = EmptyValidationError{}

// ValidateFields checks the field values on Test with the rules defined in the
// proto definition for this message. If any rules are violated, an error is returned.
func (m *Test) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = TestFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "a":

			if v, ok := interface{}(m.GetA()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return TestValidationError{
						field:  "a",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "b":

			if v, ok := interface{}(m.GetCustomName()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return TestValidationError{
						field:  "b",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "c":

			if v, ok := interface{}(&m.C).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return TestValidationError{
						field:  "c",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "g":

			if v, ok := interface{}(m.GetG()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return TestValidationError{
						field:  "g",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "h":

			if v, ok := interface{}(m.GetH()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return TestValidationError{
						field:  "h",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "i":

			if v, ok := interface{}(&m.I).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return TestValidationError{
						field:  "i",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "testOneof":
			if m.TestOneof == nil {
				return TestValidationError{
					field:  "testOneof",
					reason: "value is required",
				}
			}
			if len(subs) == 0 {
				subs = []string{
					"d", "e", "f", "k",
				}
			}
			for name, subs := range _processPaths(subs) {
				_ = subs
				switch name {
				case "d":
					w, ok := m.TestOneof.(*Test_D)
					if !ok || w == nil {
						continue
					}

					if m.GetD() <= 5 {
						return TestValidationError{
							field:  "d",
							reason: "value must be greater than 5",
						}
					}

				case "e":
					w, ok := m.TestOneof.(*Test_CustomNameOneof)
					if !ok || w == nil {
						continue
					}

					if m.GetCustomNameOneof() <= 5 {
						return TestValidationError{
							field:  "e",
							reason: "value must be greater than 5",
						}
					}

				case "f":
					w, ok := m.TestOneof.(*Test_F)
					if !ok || w == nil {
						continue
					}
					// no validation rules for F
				case "k":
					w, ok := m.TestOneof.(*Test_K)
					if !ok || w == nil {
						continue
					}

					if v, ok := interface{}(m.GetK()).(interface{ ValidateFields(...string) error }); ok {
						if err := v.ValidateFields(subs...); err != nil {
							return TestValidationError{
								field:  "k",
								reason: "embedded message failed validation",
								cause:  err,
							}
						}
					}

				}
			}
		default:
			return TestValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// TestValidationError is the validation error returned by Test.ValidateFields
// if the designated constraints aren't met.
type TestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TestValidationError) ErrorName() string { return "TestValidationError" }

// Error satisfies the builtin error interface
func (e TestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TestValidationError{}

// ValidateFields checks the field values on Test_TestNested with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Test_TestNested) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Test_TestNestedFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "a":

			if v, ok := interface{}(m.GetA()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Test_TestNestedValidationError{
						field:  "a",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "b":
			// no validation rules for B
		case "c":

			if d := m.GetC(); d != nil {
				dur := *d

				gte := time.Duration(42*time.Second + 0*time.Nanosecond)

				if dur < gte {
					return Test_TestNestedValidationError{
						field:  "c",
						reason: "value must be greater than or equal to 42s",
					}
				}

			}

		case "d":

			if v, ok := interface{}(m.GetD()).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Test_TestNestedValidationError{
						field:  "d",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "e":
			// no validation rules for E
		case "f":
			// no validation rules for F
		case "g":

			for idx, item := range m.GetG() {
				_, _ = idx, item

				if v, ok := interface{}(item).(interface{ ValidateFields(...string) error }); ok {
					if err := v.ValidateFields(subs...); err != nil {
						return Test_TestNestedValidationError{
							field:  fmt.Sprintf("g[%v]", idx),
							reason: "embedded message failed validation",
							cause:  err,
						}
					}
				}

			}

		default:
			return Test_TestNestedValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Test_TestNestedValidationError is the validation error returned by
// Test_TestNested.ValidateFields if the designated constraints aren't met.
type Test_TestNestedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Test_TestNestedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Test_TestNestedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Test_TestNestedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Test_TestNestedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Test_TestNestedValidationError) ErrorName() string { return "Test_TestNestedValidationError" }

// Error satisfies the builtin error interface
func (e Test_TestNestedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTest_TestNested.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Test_TestNestedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Test_TestNestedValidationError{}

// ValidateFields checks the field values on Test_TestNested_TestNestedNested
// with the rules defined in the proto definition for this message. If any
// rules are violated, an error is returned.
func (m *Test_TestNested_TestNestedNested) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Test_TestNested_TestNestedNestedFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "a":

			if val := m.GetA(); val <= 24 || val > 42 {
				return Test_TestNested_TestNestedNestedValidationError{
					field:  "a",
					reason: "value must be inside range (24, 42]",
				}
			}

		case "b":
			// no validation rules for B
		case "c":

		case "d":
			// no validation rules for D
		case "h":

			if v, ok := interface{}(m.Test_TestNested_TestNestedNested_TestNestedNestedEmbed).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Test_TestNested_TestNestedNestedValidationError{
						field:  "h",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "i":

			if v, ok := interface{}(&m.Test_TestNested_TestNestedNested_TestNestedNestedEmbed2).(interface{ ValidateFields(...string) error }); ok {
				if err := v.ValidateFields(subs...); err != nil {
					return Test_TestNested_TestNestedNestedValidationError{
						field:  "i",
						reason: "embedded message failed validation",
						cause:  err,
					}
				}
			}

		case "testNestedNestedOneOf":
			if len(subs) == 0 {
				subs = []string{
					"e", "f", "g",
				}
			}
			for name, subs := range _processPaths(subs) {
				_ = subs
				switch name {
				case "e":
					w, ok := m.TestNestedNestedOneOf.(*Test_TestNested_TestNestedNested_E)
					if !ok || w == nil {
						continue
					}

					if v, ok := interface{}(m.GetE()).(interface{ ValidateFields(...string) error }); ok {
						if err := v.ValidateFields(subs...); err != nil {
							return Test_TestNested_TestNestedNestedValidationError{
								field:  "e",
								reason: "embedded message failed validation",
								cause:  err,
							}
						}
					}

				case "f":
					w, ok := m.TestNestedNestedOneOf.(*Test_TestNested_TestNestedNested_F)
					if !ok || w == nil {
						continue
					}
					// no validation rules for F
				case "g":
					w, ok := m.TestNestedNestedOneOf.(*Test_TestNested_TestNestedNested_G)
					if !ok || w == nil {
						continue
					}

					if v, ok := interface{}(m.GetG()).(interface{ ValidateFields(...string) error }); ok {
						if err := v.ValidateFields(subs...); err != nil {
							return Test_TestNested_TestNestedNestedValidationError{
								field:  "g",
								reason: "embedded message failed validation",
								cause:  err,
							}
						}
					}

				}
			}
		default:
			return Test_TestNested_TestNestedNestedValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Test_TestNested_TestNestedNestedValidationError is the validation error
// returned by Test_TestNested_TestNestedNested.ValidateFields if the
// designated constraints aren't met.
type Test_TestNested_TestNestedNestedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Test_TestNested_TestNestedNestedValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e Test_TestNested_TestNestedNestedValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e Test_TestNested_TestNestedNestedValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e Test_TestNested_TestNestedNestedValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e Test_TestNested_TestNestedNestedValidationError) ErrorName() string {
	return "Test_TestNested_TestNestedNestedValidationError"
}

// Error satisfies the builtin error interface
func (e Test_TestNested_TestNestedNestedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTest_TestNested_TestNestedNested.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Test_TestNested_TestNestedNestedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Test_TestNested_TestNestedNestedValidationError{}

// ValidateFields checks the field values on
// Test_TestNested_TestNestedNested_TestNestedNestedEmbed with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Test_TestNested_TestNestedNested_TestNestedNestedEmbed) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Test_TestNested_TestNestedNested_TestNestedNestedEmbedFieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "nested_field":
			// no validation rules for NestedField
		default:
			return Test_TestNested_TestNestedNested_TestNestedNestedEmbedValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Test_TestNested_TestNestedNested_TestNestedNestedEmbedValidationError is the
// validation error returned by
// Test_TestNested_TestNestedNested_TestNestedNestedEmbed.ValidateFields if
// the designated constraints aren't met.
type Test_TestNested_TestNestedNested_TestNestedNestedEmbedValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Test_TestNested_TestNestedNested_TestNestedNestedEmbedValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e Test_TestNested_TestNestedNested_TestNestedNestedEmbedValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e Test_TestNested_TestNestedNested_TestNestedNestedEmbedValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e Test_TestNested_TestNestedNested_TestNestedNestedEmbedValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e Test_TestNested_TestNestedNested_TestNestedNestedEmbedValidationError) ErrorName() string {
	return "Test_TestNested_TestNestedNested_TestNestedNestedEmbedValidationError"
}

// Error satisfies the builtin error interface
func (e Test_TestNested_TestNestedNested_TestNestedNestedEmbedValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTest_TestNested_TestNestedNested_TestNestedNestedEmbed.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Test_TestNested_TestNestedNested_TestNestedNestedEmbedValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Test_TestNested_TestNestedNested_TestNestedNestedEmbedValidationError{}

// ValidateFields checks the field values on
// Test_TestNested_TestNestedNested_TestNestedNestedEmbed2 with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *Test_TestNested_TestNestedNested_TestNestedNestedEmbed2) ValidateFields(paths ...string) error {
	if m == nil {
		return nil
	}

	if len(paths) == 0 {
		paths = Test_TestNested_TestNestedNested_TestNestedNestedEmbed2FieldPathsNested
	}

	for name, subs := range _processPaths(append(paths[:0:0], paths...)) {
		_ = subs
		switch name {
		case "nested_field_2":

			if m.GetNestedField_2() != 2 {
				return Test_TestNested_TestNestedNested_TestNestedNestedEmbed2ValidationError{
					field:  "nested_field_2",
					reason: "value must equal 2",
				}
			}

		default:
			return Test_TestNested_TestNestedNested_TestNestedNestedEmbed2ValidationError{
				field:  name,
				reason: "invalid field path",
			}
		}
	}
	return nil
}

// Test_TestNested_TestNestedNested_TestNestedNestedEmbed2ValidationError is
// the validation error returned by
// Test_TestNested_TestNestedNested_TestNestedNestedEmbed2.ValidateFields if
// the designated constraints aren't met.
type Test_TestNested_TestNestedNested_TestNestedNestedEmbed2ValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e Test_TestNested_TestNestedNested_TestNestedNestedEmbed2ValidationError) Field() string {
	return e.field
}

// Reason function returns reason value.
func (e Test_TestNested_TestNestedNested_TestNestedNestedEmbed2ValidationError) Reason() string {
	return e.reason
}

// Cause function returns cause value.
func (e Test_TestNested_TestNestedNested_TestNestedNestedEmbed2ValidationError) Cause() error {
	return e.cause
}

// Key function returns key value.
func (e Test_TestNested_TestNestedNested_TestNestedNestedEmbed2ValidationError) Key() bool {
	return e.key
}

// ErrorName returns error name.
func (e Test_TestNested_TestNestedNested_TestNestedNestedEmbed2ValidationError) ErrorName() string {
	return "Test_TestNested_TestNestedNested_TestNestedNestedEmbed2ValidationError"
}

// Error satisfies the builtin error interface
func (e Test_TestNested_TestNestedNested_TestNestedNestedEmbed2ValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTest_TestNested_TestNestedNested_TestNestedNestedEmbed2.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = Test_TestNested_TestNestedNested_TestNestedNestedEmbed2ValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = Test_TestNested_TestNestedNested_TestNestedNestedEmbed2ValidationError{}
