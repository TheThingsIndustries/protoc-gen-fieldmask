// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package testdata

import fmt "fmt"

var _TestFieldPaths = [...]string{"a", "a.a", "a.a.a", "a.a.b", "a.a.c", "a.a.d", "a.b", "a.c", "a.d", "a.e", "b", "b.a", "b.a.a", "b.a.b", "b.a.c", "b.a.d", "b.b", "b.c", "b.d", "b.e", "c", "c.a", "c.a.a", "c.a.b", "c.a.c", "c.a.d", "c.b", "c.c", "c.d", "c.e", "d", "e", "f"}

func (*Test) FieldMaskPaths() []string {
	ret := make([]string, len(_TestFieldPaths))
	copy(ret, _TestFieldPaths[:])
	return ret
}

func (dst *Test) SetFields(src *Test, paths ...string) {
	for _, path := range paths {
		switch path {
		case "a":
			dst.A = src.A
		case "a.a":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.A = src.A.A
		case "a.a.a":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			if dst.A.A == nil {
				dst.A.A = &Test_TestNested_TestNestedNested{}
			}
			dst.A.A.A = src.A.A.A
		case "a.a.b":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			if dst.A.A == nil {
				dst.A.A = &Test_TestNested_TestNestedNested{}
			}
			dst.A.A.B = src.A.A.B
		case "a.a.c":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			if dst.A.A == nil {
				dst.A.A = &Test_TestNested_TestNestedNested{}
			}
			dst.A.A.C = src.A.A.C
		case "a.a.d":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			if dst.A.A == nil {
				dst.A.A = &Test_TestNested_TestNestedNested{}
			}
			dst.A.A.D = src.A.A.D
		case "a.b":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.B = src.A.B
		case "a.c":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.C = src.A.C
		case "a.d":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.D = src.A.D
		case "a.e":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.E = src.A.E
		case "b":
			dst.CustomName = src.CustomName
		case "b.a":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.A = src.CustomName.A
		case "b.a.a":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			if dst.CustomName.A == nil {
				dst.CustomName.A = &Test_TestNested_TestNestedNested{}
			}
			dst.CustomName.A.A = src.CustomName.A.A
		case "b.a.b":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			if dst.CustomName.A == nil {
				dst.CustomName.A = &Test_TestNested_TestNestedNested{}
			}
			dst.CustomName.A.B = src.CustomName.A.B
		case "b.a.c":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			if dst.CustomName.A == nil {
				dst.CustomName.A = &Test_TestNested_TestNestedNested{}
			}
			dst.CustomName.A.C = src.CustomName.A.C
		case "b.a.d":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			if dst.CustomName.A == nil {
				dst.CustomName.A = &Test_TestNested_TestNestedNested{}
			}
			dst.CustomName.A.D = src.CustomName.A.D
		case "b.b":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.B = src.CustomName.B
		case "b.c":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.C = src.CustomName.C
		case "b.d":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.D = src.CustomName.D
		case "b.e":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.E = src.CustomName.E
		case "c":
			dst.C = src.C
		case "c.a":
			dst.C.A = src.C.A
		case "c.a.a":
			if dst.C.A == nil {
				dst.C.A = &Test_TestNested_TestNestedNested{}
			}
			dst.C.A.A = src.C.A.A
		case "c.a.b":
			if dst.C.A == nil {
				dst.C.A = &Test_TestNested_TestNestedNested{}
			}
			dst.C.A.B = src.C.A.B
		case "c.a.c":
			if dst.C.A == nil {
				dst.C.A = &Test_TestNested_TestNestedNested{}
			}
			dst.C.A.C = src.C.A.C
		case "c.a.d":
			if dst.C.A == nil {
				dst.C.A = &Test_TestNested_TestNestedNested{}
			}
			dst.C.A.D = src.C.A.D
		case "c.b":
			dst.C.B = src.C.B
		case "c.c":
			dst.C.C = src.C.C
		case "c.d":
			dst.C.D = src.C.D
		case "c.e":
			dst.C.E = src.C.E
		case "d":
			if dst.TestOneof == nil {
				dst.TestOneof = &Test_D{}
			}
			dst.TestOneof.(*Test_D).D = src.GetD()
		case "e":
			if dst.TestOneof == nil {
				dst.TestOneof = &Test_E{}
			}
			dst.TestOneof.(*Test_E).E = src.GetE()
		case "f":
			if dst.TestOneof == nil {
				dst.TestOneof = &Test_F{}
			}
			dst.TestOneof.(*Test_F).F = src.GetF()
		default:
			panic(fmt.Errorf("Invaild fieldpath: '%s'", path))
		}
	}
}
