// Code generated by protoc-gen-fieldmask. DO NOT EDIT.

package testdata

import fmt "fmt"

var _TestFieldPaths = [...]string{
	"a",
	"a.a",
	"a.a.a",
	"a.a.b",
	"a.a.c",
	"a.a.d",
	"a.b",
	"a.c",
	"a.d",
	"a.e",
	"b",
	"b.a",
	"b.a.a",
	"b.a.b",
	"b.a.c",
	"b.a.d",
	"b.b",
	"b.c",
	"b.d",
	"b.e",
	"c",
	"c.a",
	"c.a.a",
	"c.a.b",
	"c.a.c",
	"c.a.d",
	"c.b",
	"c.c",
	"c.d",
	"c.e",
	"d",
	"e",
	"f",
}

func (*Test) FieldMaskPaths() []string {
	ret := make([]string, len(_TestFieldPaths))
	copy(ret, _TestFieldPaths[:])
	return ret
}

func (dst *Test) SetFields(src *Test, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "a":
			dst.A = src.A
		case "a.a":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.SetFields(src.A, _pathsWithoutPrefix("a", paths)...)
		case "a.a.a":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.SetFields(src.A, _pathsWithoutPrefix("a", paths)...)
		case "a.a.b":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.SetFields(src.A, _pathsWithoutPrefix("a", paths)...)
		case "a.a.c":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.SetFields(src.A, _pathsWithoutPrefix("a", paths)...)
		case "a.a.d":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.SetFields(src.A, _pathsWithoutPrefix("a", paths)...)
		case "a.b":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.SetFields(src.A, _pathsWithoutPrefix("a", paths)...)
		case "a.c":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.SetFields(src.A, _pathsWithoutPrefix("a", paths)...)
		case "a.d":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.SetFields(src.A, _pathsWithoutPrefix("a", paths)...)
		case "a.e":
			if dst.A == nil {
				dst.A = &Test_TestNested{}
			}
			dst.A.SetFields(src.A, _pathsWithoutPrefix("a", paths)...)
		case "b":
			dst.CustomName = src.CustomName
		case "b.a":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.SetFields(src.CustomName, _pathsWithoutPrefix("b", paths)...)
		case "b.a.a":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.SetFields(src.CustomName, _pathsWithoutPrefix("b", paths)...)
		case "b.a.b":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.SetFields(src.CustomName, _pathsWithoutPrefix("b", paths)...)
		case "b.a.c":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.SetFields(src.CustomName, _pathsWithoutPrefix("b", paths)...)
		case "b.a.d":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.SetFields(src.CustomName, _pathsWithoutPrefix("b", paths)...)
		case "b.b":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.SetFields(src.CustomName, _pathsWithoutPrefix("b", paths)...)
		case "b.c":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.SetFields(src.CustomName, _pathsWithoutPrefix("b", paths)...)
		case "b.d":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.SetFields(src.CustomName, _pathsWithoutPrefix("b", paths)...)
		case "b.e":
			if dst.CustomName == nil {
				dst.CustomName = &Test_TestNested{}
			}
			dst.CustomName.SetFields(src.CustomName, _pathsWithoutPrefix("b", paths)...)
		case "c":
			dst.C = src.C
		case "c.a":
			dst.C.SetFields(&src.C, _pathsWithoutPrefix("c", paths)...)
		case "c.a.a":
			dst.C.SetFields(&src.C, _pathsWithoutPrefix("c", paths)...)
		case "c.a.b":
			dst.C.SetFields(&src.C, _pathsWithoutPrefix("c", paths)...)
		case "c.a.c":
			dst.C.SetFields(&src.C, _pathsWithoutPrefix("c", paths)...)
		case "c.a.d":
			dst.C.SetFields(&src.C, _pathsWithoutPrefix("c", paths)...)
		case "c.b":
			dst.C.SetFields(&src.C, _pathsWithoutPrefix("c", paths)...)
		case "c.c":
			dst.C.SetFields(&src.C, _pathsWithoutPrefix("c", paths)...)
		case "c.d":
			dst.C.SetFields(&src.C, _pathsWithoutPrefix("c", paths)...)
		case "c.e":
			dst.C.SetFields(&src.C, _pathsWithoutPrefix("c", paths)...)
		case "d":
			if dst.TestOneof == nil {
				dst.TestOneof = &Test_D{}
			}
			dst.TestOneof.(*Test_D).D = src.GetD()
		case "e":
			if dst.TestOneof == nil {
				dst.TestOneof = &Test_E{}
			}
			dst.TestOneof.(*Test_E).E = src.GetE()
		case "f":
			if dst.TestOneof == nil {
				dst.TestOneof = &Test_F{}
			}
			dst.TestOneof.(*Test_F).F = src.GetF()
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _Test_TestNestedFieldPaths = [...]string{
	"a",
	"a.a",
	"a.b",
	"a.c",
	"a.d",
	"b",
	"c",
	"d",
	"e",
}

func (*Test_TestNested) FieldMaskPaths() []string {
	ret := make([]string, len(_Test_TestNestedFieldPaths))
	copy(ret, _Test_TestNestedFieldPaths[:])
	return ret
}

func (dst *Test_TestNested) SetFields(src *Test_TestNested, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "a":
			dst.A = src.A
		case "a.a":
			if dst.A == nil {
				dst.A = &Test_TestNested_TestNestedNested{}
			}
			dst.A.SetFields(src.A, _pathsWithoutPrefix("a", paths)...)
		case "a.b":
			if dst.A == nil {
				dst.A = &Test_TestNested_TestNestedNested{}
			}
			dst.A.SetFields(src.A, _pathsWithoutPrefix("a", paths)...)
		case "a.c":
			if dst.A == nil {
				dst.A = &Test_TestNested_TestNestedNested{}
			}
			dst.A.SetFields(src.A, _pathsWithoutPrefix("a", paths)...)
		case "a.d":
			if dst.A == nil {
				dst.A = &Test_TestNested_TestNestedNested{}
			}
			dst.A.SetFields(src.A, _pathsWithoutPrefix("a", paths)...)
		case "b":
			dst.B = src.B
		case "c":
			dst.C = src.C
		case "d":
			dst.D = src.D
		case "e":
			dst.E = src.E
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}

var _Test_TestNested_TestNestedNestedFieldPaths = [...]string{
	"a",
	"b",
	"c",
	"d",
}

func (*Test_TestNested_TestNestedNested) FieldMaskPaths() []string {
	ret := make([]string, len(_Test_TestNested_TestNestedNestedFieldPaths))
	copy(ret, _Test_TestNested_TestNestedNestedFieldPaths[:])
	return ret
}

func (dst *Test_TestNested_TestNestedNested) SetFields(src *Test_TestNested_TestNestedNested, paths ...string) {
	for _, path := range _cleanPaths(paths) {
		switch path {
		case "a":
			dst.A = src.A
		case "b":
			dst.B = src.B
		case "c":
			dst.C = src.C
		case "d":
			dst.D = src.D
		default:
			panic(fmt.Errorf("invalid field path: '%s'", path))
		}
	}
}
